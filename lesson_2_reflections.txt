What happens when you initialize a repository? Why do you need to do it?

Git starts keeping metadata on changes in the repository.

How is the staging area different from the working directory and the repository?

While the workspace physiaclly holds the files in our project, the staging area keeps
info about changes that have been made to these files. This tracking info is stored 
along with the project files when a commit is made. Making a commit creates a copy of 
the project files and tracking info in the repo.

How can you use the staging area to make sure you have one commit per logical
change?

By doing successive adds and commits for each logical change. In this way, only one
file is modified on each staging and commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

...when one is not sure how a modification of a file would affect the whole project.
In this way, one is guaranteed that the current commit is kept intact.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?